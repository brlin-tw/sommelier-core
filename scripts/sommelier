#!/bin/bash

if [[ -n "${SNAP_SOMMELIER_STRICT:-}" ]]; then
  # set -e
  set -u
fi

if [[ -n "${SNAP_SOMMELIER_DEBUG:-}" ]]; then
  START=$(date +%s.%N)
  set -x
fi

if [[ "$SNAP_ARCH" != "amd64" ]]; then
  echo "ERROR: Host architecture ($SNAP_ARCH) unsupported."
  exit 1
fi

#####################
# Utility Functions #
#####################

# ensure_dir_exists calls `mkdir -p` if the given path is not a directory.
# This speeds up execution time by avoiding unnecessary calls to mkdir.
#
# Usage: ensure_dir_exists <path> [<mkdir-options>]...
#
ensure_dir_exists() {
  [[ -d "$1" ]] ||  mkdir -p "$@"
}

prepend_dir() {
  local var="$1"
  local dir="$2"
  local LIB="\$LIB"
  eval "export $var=\"\$dir\${$var:+:\$$var}\""
}

append_dir() {
  local var="$1"
  local dir="$2"
  local LIB="\$LIB"
  eval "export $var=\"\${$var:+\$$var:}\$dir\""
}

#######################
# Sommelier functions #
#######################

init_wine() {
  echo "Initialising Wine.."

  if [[ -z "${FORCE_WIN32:-}" ]] && grep "arch=win32" "$WINEPREFIX/system.reg" ; then
      echo "WARNING: Old Wine prefix is win32, but FORCE_WIN32 is not set. Removing old Wine prefix and generating a win64 one."
      mv "$WINEPREFIX" "${WINEPREFIX}.bak-$(date +%s)"
  fi

  # Create the Wineprefix
  "${WINELOADER}" wineboot --init 2>&1 | \
  yad --progress --title="Preparing Windows environment" --progress-text= --width=400 --center --no-buttons --auto-close --auto-kill --pulsate
  # Opt out of winetricks metrics - we ninja this to avoid dialogs
  if [[ ! -f "${XDG_CACHE_HOME}/winetricks/track_usage" ]]; then
    mkdir -p "${XDG_CACHE_HOME}/winetricks"
    echo 0 > "${XDG_CACHE_HOME}/winetricks/track_usage"
  fi

  # link ttf & ttc fonts from root to wineprefix
  ensure_dir_exists "$WINEPREFIX/drive_c/windows/Fonts"
  find /usr/share/fonts/ -type f \( -name "*.ttf" -o -name "*.ttc" \) -exec ln -vs "{}" "$WINEPREFIX/drive_c/windows/Fonts/" \; &>/dev/null

  # Install the ReactOS Modern theme and set as default
  ensure_dir_exists "$WINEPREFIX/drive_c/windows/Resources/Themes/modern"
  cp -r "$SNAP/themes/"* "$WINEPREFIX/drive_c/windows/Resources/Themes"
  "$WINELOADER" regedit "$SNAP/themes/modern/modern.reg"
  sleep 1

  # Better support for Chinese fonts.
  progHome="$SNAP_USER_DATA/photoscape"
  ensure_dir_exists "$progHome"
  progReg="$progHome/cjk.reg"
  if (locale | grep -e 'LANG=zh_CN' -e 'LANG=zh_SG') >/dev/null 2>&1; then cat > $progReg <<'EOF'
Windows Registry Editor Version 5.00
[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]
"MS Shell Dlg"="Noto Sans CJK SC Regular"
"Tms Rmn"="Noto Sans CJK SC Regular"
EOF
    "$WINELOADER" regedit $progReg
    sleep 1
    rm $progReg &>/dev/null
  elif (locale | grep -e 'LANG=zh_HK' -e 'LANG=zh_MO' -e 'LANG=zh_TW') >/dev/null 2>&1; then cat > $progReg <<'EOF'
Windows Registry Editor Version 5.00
[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]
"MS Shell Dlg"="Noto Sans CJK TC Regular"
"Tms Rmn"="Noto Sans CJK TC Regular"
EOF
    "$WINELOADER" regedit $progReg
    sleep 1
    rm $progReg &>/dev/null
  fi
  echo "$SNAP_REVISION" > "$SNAP_USER_COMMON/.last_snap_revision"
}

install_app() {
  echo "Installing application.."

  if [[ -f "$SNAP/bin/snap-pre-install" ]]; then
    . "$SNAP/bin/snap-pre-install"
  fi

  # Install additional requirements via winetricks here
  if [[ -n "${TRICKS:-}" ]]; then
    for TRICK in ${TRICKS}; do
      "${WINETRICKS}" --unattended prefix="$WINEPREFIX" "${TRICK}" | \
      yad --progress --title="Installing ${TRICK}" --progress-text= --width=400 --center --no-buttons --auto-close --auto-kill --on-top --pulsate
    done
  fi

  # Modify or remove this as required by your application.
  if [[ -n "${INSTALL_URL:-}" ]]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL}" -O "${TMPDIR}/${INSTALL_EXE}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape

    LOCAL_INSTALL_EXE="${TMPDIR}/${INSTALL_EXE}"
  elif [[ -n "${INSTALL_EXE:-}" ]]; then
    LOCAL_INSTALL_EXE="${INSTALL_EXE}"
  fi

  # Installs the wine application
  "${WINELOADER}" "${LOCAL_INSTALL_EXE}" "${INSTALL_FLAGS:-}"

  if [[ -n "${INSTALL_URL:-}" ]]; then
    # Removes the cached installer
    rm -v "${TMPDIR}/${INSTALL_EXE}"
  fi

  if [[ -f "$SNAP/bin/snap-post-install" ]]; then
    . "$SNAP/bin/snap-post-install"
  fi

  echo "$SNAP_VERSION" > "$SNAP_USER_COMMON/.last_snap_version"
}

launch_app() {
  echo "Launching application.."

  if [[ -f "$SNAP/bin/snap-pre-start" ]]; then
    . "$SNAP/bin/snap-pre-start"
  fi

  if [ -n "${SNAP_SOMMELIER_DEBUG:-}" ]; then
    echo "sommelier elapsed time: $(date +%s.%N --date="$START seconds ago")"
    echo "Now running: '${WINELOADER}' start /wait /unix '${RUN_EXE}' '${ACTION_ARGS[@]}'"
  fi

  "${WINELOADER}" start /wait /unix "${RUN_EXE}" "${ACTION_ARGS[@]}"

  local exit_code="$?"

  if [[ -f "$SNAP/bin/snap-post-stop" ]]; then
    . "$SNAP/bin/snap-post-stop"
  fi

  exit $exit_code
}

if [[ -z "${WINEDEBUG:-}" ]]; then
  export WINEDEBUG="-all"
fi

# If we've been given and installer URL derive the filename
if [[ -n "${INSTALL_URL:-}" ]]; then
  INSTALL_EXE="$(basename "${INSTALL_URL}")"
fi

###########################
# Wine platform selection #
###########################

WINE_RELEASE="$(
  grep \
    --extended-regexp \
    'default-provider: *wine-platform-[[:digit:]]' \
    $SNAP/meta/snap.yaml \
    | cut --delimiter=: --fields=2 \
    | sed 's/^ *//;s|-| |g' \
    | awk '{print $4}'
)"
WINE_PLATFORM="$SNAP/wine-platform/wine-$WINE_RELEASE"

if [[ ! -d "$WINE_PLATFORM" ]]; then
  platform_snap_name="$(
    grep \
      --extended-regexp \
      'default-provider: *wine-platform-[[:digit:]]' \
      $SNAP/meta/snap.yaml \
      | cut --delimiter=: --fields=2 \
      | sed 's/^ *//' \
      || true
  )"

  if test -n "${platform_snap_name:-}"; then
    echo "ERROR: You need to connect this snap to the wine platform snap."
    echo ""
    echo "You can do this with those commands:"
    echo "snap install ${platform_snap_name}"
    echo "snap connect $SNAP_NAME:$(echo $platform_snap_name | sed 's|-platform||g') ${platform_snap_name}"
    echo ""
    exit 1
  else
    echo "ERROR: This snap is broken. Please contact the publisher."
    echo ""
    echo "The snap has no plugs to the wine platform snap."
    echo "Please add the plugs to the wine platform"
    echo ""
    exit 1
  fi
fi

if [[ -n "${FORCE_WIN32:-}" ]]; then
  export WINE="wine"
  export WINEARCH="win32"
  export WINELOADER="$WINE_PLATFORM/bin/wine"
  export WINEDLLPATH="$WINE_PLATFORM/lib/wine/fakedlls"
else
  export WINE="wine64"
  export WINEARCH="win64"
  export WINELOADER="$WINE_PLATFORM/bin/wine64"
  export WINEDLLPATH="$WINE_PLATFORM/lib64/wine/fakedlls"
fi

append_dir PATH "$WINE_PLATFORM/bin"

append_dir LD_LIBRARY_PATH "$WINE_PLATFORM/lib"
append_dir LD_LIBRARY_PATH "$WINE_PLATFORM/lib64"


###########################
# Wine runtime selection #
###########################

WINE_PLATFORM_RUNTIME="$SNAP/wine-runtime"
if [[ ! -f "$WINE_PLATFORM_RUNTIME/bin/wprfile" ]]; then
  runtime_snap_name="$(
    grep \
      --extended-regexp \
      'default-provider: *wine-platform-runtime' \
      $SNAP/meta/snap.yaml \
      | cut --delimiter=: --fields=2 \
      | sed 's/^ *//' \
      || true
  )"

  if test -n "${runtime_snap_name:-}"; then
    echo "ERROR: You need to connect this snap to the wine runtime snap."
    echo ""
    echo "You can do this with those commands:"
    echo "snap install ${runtime_snap_name}"
    echo "snap connect $SNAP_NAME:$(echo $runtime_snap_name | sed 's|-platform||g') ${runtime_snap_name}"
    echo ""
    exit 1
  else
    echo "ERROR: This snap is broken. Please contact the publisher."
    echo ""
    echo "The snap has no plugs to the wine runtime"
    echo "Please add the plugs to the wine runtime"
    echo ""
    exit 1
  fi
fi

append_dir PATH "$WINE_PLATFORM_RUNTIME/bin"
append_dir PATH "$WINE_PLATFORM_RUNTIME/usr/bin"

prepend_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/lib"
prepend_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/\$LIB"
prepend_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/usr/lib"
prepend_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/usr/\$LIB"
prepend_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/lib64"
# SAMBA Libs for ntlm_auth to function
append_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/usr/\$LIB/samba"
append_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/usr/\$LIB/samba"

export WINETRICKS="$WINE_PLATFORM_RUNTIME/bin/winetricks"
export WINETRICKS_LATEST_VERSION_CHECK="disabled"

export WINEPREFIX="$SNAP_USER_COMMON/.wine"

export DXVK_CONFIG_FILE="$SNAP_USER_COMMON/dxvk.conf"
if [[ -z "${DXVK_LOG_LEVEL:-}" ]]; then
  export DXVK_LOG_LEVEL="none"
fi

append_dir LD_LIBRARY_PATH "$SNAP/lib"
append_dir LD_LIBRARY_PATH "$SNAP/\$LIB"
append_dir LD_LIBRARY_PATH "$SNAP/usr/lib"
append_dir LD_LIBRARY_PATH "$SNAP/usr/\$LIB"

# Don't Stop wine from updating $WINEPREFIX automatically
if [[ -f "${WINEPREFIX}/.update-timestamp" ]]; then
  chkstmp="$(grep -c disable "${WINEPREFIX}/.update-timestamp")"
  if [[ "$chkstmp" -eq 1 ]]; then
    rm "${WINEPREFIX}/.update-timestamp"
  fi
fi

if [[ ! -f "${WINEPREFIX}/drive_c/windows/system.ini"  || "$(cat "$SNAP_USER_COMMON/.last_snap_revision" 2>/dev/null)" != "$SNAP_REVISION" ]]; then
  init_wine
fi

#####################################
# Actually run the requested action #
#####################################


# Get the action we're asked to run
if [[ -n "${1:-}" ]]; then
  ACTION="${1}"
  shift
  ACTION_ARGS=( "$@" )
else
  echo "ERROR: I need an action as first argument. Exiting here."
  exit 1
fi

# Launch the requested program.
if [[ "$ACTION" = "winetricks" ]]; then
  "$WINETRICKS" prefix="$WINEPREFIX" "${ACTION_ARGS[@]}"
elif [[ "$ACTION" = "winedbg" ]]; then
  "$ACTION" "${ACTION_ARGS[@]}"  
elif [[ "$ACTION" = "run-exe" ]]; then
  # Check if we know which executable to run. 
  # Note: RUN_EXE is provided as an environment variable instead of a CLI
  # parameter so that snaps using command-chain can specify an executable
  # with a space in the path without having to use a wrapper script.
  if [[ -z "${RUN_EXE:-}" ]]; then
    echo "ERROR: No executable provided. Please provide the path to the executable using the RUN_EXE environment variable."
    exit 1
  fi

  # Turn relative path to executable into an absolute path.
  if [[ "$RUN_EXE" == "/Program Files"* ]]; then
    RUN_EXE="${WINEPREFIX}/drive_c${RUN_EXE}"
  fi

  # Install if the executable doesn't exist or the snap version changed.
  if [[ ! -e "$RUN_EXE"  || "$(cat "$SNAP_USER_COMMON/.last_snap_version" 2>/dev/null)" != "$SNAP_VERSION" ]]; then
    install_app
  fi

  # Run the application
  launch_app
else
  "$WINELOADER" "$ACTION" "${ACTION_ARGS[@]}"
fi
